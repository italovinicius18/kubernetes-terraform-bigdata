default:
  image: 
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

variables:
  REGION: "us-east-1"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_PROD}"
        AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_PROD}"
        TF_BUCKET: "terraform"
        TF_KEY: "artifacts/k8s-apps/k8s-apps-prod.tfstate"
        TF_WORKSPACE: "prod"
      when: always
    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_DEV}"
        AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_DEV}"
        TF_BUCKET: "terraform-dev"
        TF_KEY: "artifacts/k8s-apps/k8s-apps-dev.tfstate"
        TF_WORKSPACE: "dev"
      when: always

.terraform:
  before_script:
    - terraform --version
    - cd iac/
    - echo $TF_BUCKET
    - echo $TF_KEY
    - echo $TF_WORKSPACE
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - echo terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${TF_KEY}" -backend-config="region=${REGION}"
    - terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${TF_KEY}" -backend-config="region=${REGION}"

stages:
  - fmt
  - validate
  - plan
  - apply
  - destroy

fmt:
  stage: fmt
  extends: .terraform
  script:
    - terraform fmt -check=true

validate:
  stage: validate
  extends: .terraform
  script:
    - terraform validate

plan:
  stage: plan
  extends: .terraform
  script:
    - terraform plan

apply:
  stage: apply
  extends: .terraform
  script:
    - apk add --no-cache py-pip
    - pip install awscli
    - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
    - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
    - aws configure set region ${REGION}
    - terraform apply -auto-approve
  allow_failure: true
  when: manual

destroy:
  stage: destroy
  extends: .terraform
  script:
    - terraform destroy -auto-approve
  when: manual

apply:on-schedule:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_ACTION == "apply"
  stage: apply
  extends: .terraform
  script:
    - apk add --no-cache py-pip
    - pip install awscli
    - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
    - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
    - aws configure set region ${REGION}
    - terraform apply -auto-approve
  allow_failure: true

destroy:on-schedule:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_ACTION == "destroy"
  stage: destroy
  extends: .terraform
  script:
    - terraform destroy -auto-approve
